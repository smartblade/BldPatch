#include <gtest/gtest.h>
#include <Utils/FieldOffset.h>
#define protected public
#define private public
#include <Raster/rOpenGL3/ROpenGLDeviceDLL.h>


TEST(OpenGLRasterDeviceTests, SizeOf)
{
    EXPECT_EQ(sizeof(B_OpenGLRasterDevice), 0xB24A4);
}

TEST(OpenGLRasterDeviceTests, Fields)
{
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, flags, 0x00004);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, posX, 0x00008);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, posY, 0x0000C);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, currentFont, 0x00010);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, textMode, 0x00014);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, textDirection, 0x00018);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, textShadowX, 0x0001C);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, textShadowY, 0x00020);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, textScaleX, 0x00024);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, textScaleY, 0x00028);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, mode, 0x0002C);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, blurLeft, 0x00030);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, blurTop, 0x00034);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, blurRight, 0x00038);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, blurBottom, 0x0003C);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, clipX, 0x00040);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, clipY, 0x00044);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, clipWidth, 0x00048);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, clipHeight, 0x0004C);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, clipActive, 0x00050);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, width, 0x00054);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, height, 0x00058);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, unknown005C, 0x0005C);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, unknown0060, 0x00060);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, unknown064, 0x00064);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, unknown068, 0x00068);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, unknown06C, 0x0006C);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, unknown070, 0x00070);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, unknown074, 0x00074);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, ModeReflection, 0x00078);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, unknown007C, 0x0007C);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, fogSubdivide, 0x00080);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, unknown0084, 0x00084);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, unknown0088, 0x00088);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, unknown00AC, 0x000AC);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, numLights, 0x000B0);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, lights, 0x000B4);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, numPointLights, 0x001B4);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, pointLights, 0x001B8);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, unknown9B8, 0x009B8);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, unknown9BC, 0x009BC);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, unknown002168, 0x02168);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, numVertices, 0x0216C);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, vertices, 0x02170);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, numEdges, 0x4E170);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, edges, 0x4E174);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, numTriangles, 0x62174);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, triangles, 0x62178);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, currentPointLight, 0x7A178);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, unknown07A17C, 0x7A17C);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, window, 0x84198);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, deviceContext, 0x8419C);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, glContext, 0x841A0);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, unknown0841A4, 0x841A4);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, rasterModule, 0x841A8);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, gammaRamp, 0x841AC);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, hasGammaRamp, 0x847AC);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, isGammaRampSet, 0x847B0);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, unknown0847B4, 0x847B4);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, backgroundRegion, 0x847B8);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, useCreditsHack, 0x847BC);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, backgroundImageWidth, 0x847C0);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, backgroundImageHeight, 0x847C4);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, unknown0847C8, 0x847C8);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, unknown0847CC, 0x847CC);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, currentDisplayWidth, 0x847D0);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, currentDisplayHeight, 0x847D4);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, currentDisplayDepth, 0x847D8);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, currentDisplayFrequency, 0x847DC);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, unknown0847E0, 0x847E0);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, domeColor, 0x847E4);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, useMipmaps, 0x847EC);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, unknown0847F0, 0x847F0);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, unknown0847F4, 0x847F4);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, toonRender, 0x847F8);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, toonColor, 0x847FC);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, toonTextures, 0x84800);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, BWRender, 0x84804);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, toonLineWidth, 0x84808);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, showStats, 0x8480C);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, textureMinifyingFunc, 0x84810);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, textureMagnificationFunc, 0x84814);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, anisotropicLevel, 0x84818);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, textureLODBias, 0x8481C);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, hasTextureEnvCombine, 0x84820);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, hasTextureFilterAnisotropic, 0x84824);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, hasTextureLodBias, 0x84828);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, hasFogCoord, 0x8482C);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, hasARBTextureCompression, 0x84830);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, hasNVRegisterCombiners, 0x84834);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, hasSGISMipmapping, 0x84838);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, useTextureFont, 0x8483C);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, tFontOpaque, 0x84840);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, useCompressedTextures, 0x84844);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, tFontScale, 0x84848);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, unknown08484C, 0x8484C);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, useOGLLight, 0x8485C);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, notUsePalettes, 0x84860);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, unknown084864, 0x84864);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, useOGLFog, 0x84868);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, cacheStretchImage, 0x8486C);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, unknown084870, 0x84870);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, unknown084874, 0x84874);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, unknown084878, 0x84878);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, unknown08487C, 0x8487C);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, unknown084880, 0x84880);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, unknown084884, 0x84884);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, isFog, 0x860A0);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, unknown0860A4, 0x860A4);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, unknown0860A8, 0x860A8);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, unknown0860AC, 0x860AC);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, alpha, 0x860B8);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, fillColor, 0x860BC);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, textColor, 0x860CC);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, blurRGBA, 0x860D0);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, pose, 0x860E0);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, invPose, 0x86160);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, modelviewMatrix, 0x861E0);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, projectionMatrix, 0x86260);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, viewport, 0x862E0);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, unknown0862F0, 0x862F0);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, transformations, 0x862F4);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, videoModes, 0x862F8);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, fullScreenMode, 0x86310);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, unknown086314, 0x86314);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, gamma, 0x8632C);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, contrast, 0x86334);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, brightness, 0x8633C);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, colorTable, 0x86344);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, textures, 0x86444);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, nextTextureId, 0x8645C);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, atmospheres, 0x86460);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, fogColor, 0x86478);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, fogDensity, 0x86488);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, fogFactor, 0x8648C);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, fogEnabled, 0x86490);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, numTrisMaps, 0x86494);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, numTrisObjs, 0x86498);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, numParticles, 0x8649C);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, numTextureSwaps, 0x864A0);
    EXPECT_OFFSET_EQ(B_OpenGLRasterDevice, unknownFields864A4, 0x864A4);
}
